<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--指定命名空间-->
<mapper namespace="so.dao.IUserDao">

    <!--&lt;!&ndash;    配置查询结果的列名和实体属性名的对应关系&ndash;&gt;-->
    <!--    <resultMap id="userMap" type="uSeR">-->
    <!--&lt;!&ndash;        主键字段的对应&ndash;&gt;-->
    <!--        <id property="userId" column="id"></id>-->

    <!--        <result property="userName" column="username"></result>-->
    <!--        <result property="userAddress" column="address"></result>-->
    <!--        <result property="userSex" column="sex"></result>-->
    <!--        <result property="userBirthday" column="birthday"></result>-->
    <!--    </resultMap>-->


    <!--    <select id="findById" parameterType="INT" resultMap="userMap">-->
    <!--        select * from user where id = #{uid}-->
    <!--    </select>-->

    <!--    &lt;!&ndash;    配置查询所有用户的sql&ndash;&gt;-->
    <!--    <select id="findAll"  resultMap="userMap">-->
    <!--        select * from  user-->
    <!--    </select>-->


    <!--        查询所有-->
    <select id="findAll" resultType="so.domain.User">
            select * from  user
        </select>
    <!--&lt;!&ndash;        通过id进行查询&ndash;&gt;-->
    <select id="findById" parameterType="INT" resultType="so.domain.User">
            select * from user where id = #{uid}
        </select>

    <!--        保存用户-->
    <!--    savaUser-->
    <insert id="saveUser"  parameterType="so.domain.User">
        --         配置保存时获取插入id keyColumn数据库中的列名 keyProperty实体类     不写时无法返回
        <selectKey keyColumn="id" keyProperty="id" resultType="int">
            select  last_insert_id();
      </selectKey>
        insert into user (username, birthday, sex, address)
        values (#{username},#{birthday},#{sex},#{address} )
    </insert>

    <!--    更新用户-->
    <update id="updateUser" parameterType="so.domain.User">
        update user set username = #{username},birthday=#{birthday},
        sex=#{sex}, address=#{address} where id = #{id}
    </update>
    <!--删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user  where id = #{id}
    </delete>

    <!--    根据姓名进行模糊查询-->
    <select id="findByName" parameterType="java.lang.String" resultType="so.domain.User">
        select * from user where username like #{name};
    </select>
    <!--    查询总记录数-->
    <select id="findTotal" resultType="java.lang.Integer">
        select count(*) from user;
    </select>

</mapper>